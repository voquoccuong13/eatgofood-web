const express = require('express');
const router = express.Router();
const Review = require('../models/reviewModel');
const User = require('../models/User');
const Order = require('../models/order');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const Product = require('../models/productModel');

// ƒê·∫£m b·∫£o th∆∞ m·ª•c uploads t·ªìn t·∫°i
const uploadDir = path.join(__dirname, '../uploads/reviews');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
    console.log('‚úÖ Created upload directory:', uploadDir);
}

// C·∫•u h√¨nh multer ƒë·ªÉ l∆∞u ·∫£nh ƒë√°nh gi√°
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        // T·∫°o t√™n file unique v·ªõi timestamp v√† t√™n file g·ªëc
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1e9);
        const ext = path.extname(file.originalname);
        const name = path.basename(file.originalname, ext);
        cb(null, `review-${uniqueSuffix}-${name}${ext}`);
    },
});

// File filter ƒë·ªÉ ki·ªÉm tra lo·∫°i file
const fileFilter = (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
    if (allowedTypes.includes(file.mimetype)) {
        cb(null, true);
    } else {
        cb(new Error('Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh (JPG, JPEG, PNG, GIF)'), false);
    }
};

const upload = multer({
    storage,
    fileFilter,
    limits: {
        fileSize: 5 * 1024 * 1024, // 5MB
        files: 3, // T·ªëi ƒëa 3 files
    },
});

// === POST /api/reviews === //
router.post('/', (req, res) => {
    // S·ª≠ d·ª•ng middleware upload v·ªõi error handling
    upload.array('images', 3)(req, res, async (err) => {
        if (err instanceof multer.MulterError) {
            console.error('Multer error:', err);
            if (err.code === 'LIMIT_FILE_SIZE') {
                return res.status(400).json({ message: 'File qu√° l·ªõn. T·ªëi ƒëa 5MB m·ªói file.' });
            }
            if (err.code === 'LIMIT_FILE_COUNT') {
                return res.status(400).json({ message: 'Qu√° nhi·ªÅu file. T·ªëi ƒëa 3 ·∫£nh.' });
            }
            return res.status(400).json({ message: 'L·ªói upload file: ' + err.message });
        } else if (err) {
            console.error('Upload error:', err);
            return res.status(400).json({ message: err.message });
        }

        try {
            const { orderCode, rating, comment, productId, userId } = req.body;
            const files = req.files;

            console.log('üìù Received review data:', {
                orderCode,
                rating,
                comment: comment?.substring(0, 50) + '...',
                productId,
                userId,
                filesCount: files?.length || 0,
            });

            // Validation
            if (!orderCode || !rating || !comment || !productId) {
                return res.status(400).json({ message: 'Thi·∫øu d·ªØ li·ªáu ƒë√°nh gi√° b·∫Øt bu·ªôc' });
            }

            if (rating < 1 || rating > 5) {
                return res.status(400).json({ message: 'Rating ph·∫£i t·ª´ 1 ƒë·∫øn 5' });
            }

            if (comment.trim().length < 10) {
                return res.status(400).json({ message: 'Nh·∫≠n x√©t ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±' });
            }

            // Ki·ªÉm tra ƒë∆°n h√†ng h·ª£p l·ªá
            const order = await Order.findOne({ orderCode }).populate('user');
            if (!order) {
                console.log('‚ùå Order not found:', orderCode);
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng' });
            }

            // Ki·ªÉm tra xem ƒë√£ ƒë√°nh gi√° ch∆∞a
            const existingReview = await Review.findOne({ orderCode, productId });
            if (existingReview) {
                console.log('‚ùå Review already exists for:', orderCode, productId);
                return res.status(400).json({ message: 'S·∫£n ph·∫©m n√†y ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° trong ƒë∆°n h√†ng' });
            }

            // L∆∞u ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh
            const imagePaths =
                files?.map((file) => {
                    const relativePath = `/uploads/reviews/${file.filename}`;
                    console.log('üì∏ Saved image:', relativePath);
                    return relativePath;
                }) || [];

            // T·∫°o review m·ªõi
            const review = await Review.create({
                orderCode,
                productId,
                userId: userId || order.user._id,
                userName: order.fullName || order.user.fullName || 'Ng∆∞·ªùi d√πng ·∫©n danh',
                userAvatar: order.user.avatar || '',
                foodName: order.items?.find((item) => item.productId === productId)?.name || 'S·∫£n ph·∫©m',
                rating: parseInt(rating),
                comment: comment.trim(),
                images: imagePaths,
            });

            console.log('‚úÖ Review created:', review._id);

            // C·∫≠p nh·∫≠t ƒëi·ªÉm rating trung b√¨nh v√† s·ªë l∆∞·ª£ng ƒë√°nh gi√° cho s·∫£n ph·∫©m
            if (productId) {
                const reviews = await Review.find({ productId });
                const numReviews = reviews.length;

                if (numReviews > 0) {
                    const totalRating = reviews.reduce((sum, r) => sum + r.rating, 0);
                    const avgRating = Math.round((totalRating / numReviews) * 10) / 10;

                    const updatedProduct = await Product.findByIdAndUpdate(
                        productId,
                        {
                            rating: avgRating,
                            numReviews,
                        },
                        { runValidators: true, new: true },
                    );

                    if (updatedProduct) {
                        console.log(
                            '‚úÖ Updated product rating:',
                            updatedProduct.name,
                            '‚≠ê',
                            updatedProduct.rating,
                            `(${numReviews} reviews)`,
                        );
                    } else {
                        console.log('‚ùå Could not update product rating');
                    }
                }
            }

            // Ki·ªÉm tra xem t·∫•t c·∫£ s·∫£n ph·∫©m trong ƒë∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√° ch∆∞a
            const orderProductIds = Array.isArray(order.items) ? order.items.map((item) => item.productId) : [];

            const reviewedProductIds = await Review.find({
                orderCode,
                productId: { $in: orderProductIds },
            }).distinct('productId');

            // N·∫øu t·∫•t c·∫£ s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë√°nh gi√°, mark ƒë∆°n h√†ng l√† ƒë√£ review
            if (reviewedProductIds.length === orderProductIds.length) {
                order.hasReview = true;
                await order.save();
                console.log('‚úÖ Order marked as fully reviewed:', orderCode);
            }

            res.status(201).json({
                message: 'ƒê√°nh gi√° th√†nh c√¥ng',
                review: {
                    ...review.toObject(),
                    images: imagePaths,
                },
            });
        } catch (error) {
            console.error('‚ùå Error creating review:', error);

            // Cleanup uploaded files n·∫øu c√≥ l·ªói
            if (req.files) {
                req.files.forEach((file) => {
                    fs.unlink(file.path, (err) => {
                        if (err) console.error('Error deleting file:', err);
                    });
                });
            }

            res.status(500).json({ message: 'L·ªói m√°y ch·ªß khi t·∫°o ƒë√°nh gi√°' });
        }
    });
});

// === GET /api/reviews?productId=... === //
router.get('/', async (req, res) => {
    const { productId } = req.query;

    try {
        if (!productId) {
            return res.status(400).json({ message: 'Thi·∫øu productId trong query' });
        }

        const reviews = await Review.find({ productId }).sort({ createdAt: -1 });
        res.json(reviews);
    } catch (err) {
        console.error('L·ªói khi l·∫•y ƒë√°nh gi√° theo productId:', err);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y ƒë√°nh gi√° theo s·∫£n ph·∫©m' });
    }
});

// === GET /api/reviews/recent?limit=6 === //
router.get('/recent', async (req, res) => {
    const limit = parseInt(req.query.limit) || 6;
    try {
        const reviews = await Review.find().sort({ createdAt: -1 }).limit(limit);
        res.json(reviews);
    } catch (err) {
        console.error('Error getting recent reviews:', err);
        res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y ƒë√°nh gi√°' });
    }
});

// === DELETE /api/reviews/:id (optional - ƒë·ªÉ x√≥a review n·∫øu c·∫ßn) === //
router.delete('/:id', async (req, res) => {
    try {
        const review = await Review.findById(req.params.id);
        if (!review) {
            return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ƒë√°nh gi√°' });
        }

        // X√≥a c√°c file ·∫£nh
        if (review.images && review.images.length > 0) {
            review.images.forEach((imagePath) => {
                const fullPath = path.join(__dirname, '..', imagePath);
                fs.unlink(fullPath, (err) => {
                    if (err) console.error('Error deleting image:', err);
                    else console.log('Deleted image:', fullPath);
                });
            });
        }

        await Review.findByIdAndDelete(req.params.id);
        res.json({ message: 'X√≥a ƒë√°nh gi√° th√†nh c√¥ng' });
    } catch (err) {
        console.error('Error deleting review:', err);
        res.status(500).json({ message: 'L·ªói khi x√≥a ƒë√°nh gi√°' });
    }
});

module.exports = router;

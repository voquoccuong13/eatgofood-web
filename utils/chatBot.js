const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config();
const Product = require('../models/productModel');
const stringSimilarity = require('string-similarity');

const genAI = new GoogleGenerativeAI(process.env.API_KEY_GEMINI);
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

const MAIN_CATEGORIES = ['burger', 'pizza', 'chicken', 'g√†', 'th·ª©c u·ªëng', 'n∆∞·ªõc', 'tr√°ng mi·ªáng', 'dessert', 'combo'];
const CATEGORIES = ['b√≤', 'g√†', 'c√°', 'heo', 'chay', 'kem', 'b√°nh', 'ch√®', 'sinh t·ªë', 'n∆∞·ªõc √©p', 'tr√† s·ªØa'];

const normalizeText = (str) =>
    str
        .toLowerCase()
        .normalize('NFD')
        .replace(/[ÃÄ-ÕØ]/g, '')
        .replace(/[^\w\s]/g, '')
        .trim();

function extractKeywords(text) {
    const rawStopWords = [
        'c√≥',
        'ko',
        'kh√¥ng',
        'cho',
        'm√¨nh',
        'mu·ªën',
        'ƒÉn',
        'u·ªëng',
        'xin',
        'v·ªõi',
        'l√†',
        'gi√°',
        'bao',
        'nhi√™u',
        'c√≤n',
        't√¥i',
        'em',
        'anh',
        'ch·ªã',
        '?',
        'm√≥n',
        'n√†o',
    ];
    const stopWords = rawStopWords.map(normalizeText);
    return normalizeText(text)
        .split(/\s+/)
        .filter((word) => word && !stopWords.includes(word));
}

const MAIN_CATEGORY_MAP = {
    burger: 'burger',
    pizza: 'pizza',
    combo: 'combo',
    nuoc: 'th·ª©c u·ªëng',
    drink: 'th·ª©c u·ªëng',
    dessert: 'tr√°ng mi·ªáng',
    trangmieng: 'tr√°ng mi·ªáng',
};

const CATEGORY_MAP = {
    bo: 'b√≤',
    ga: 'g√†',
    ca: 'c√°',
    tom: 't√¥m',
    chay: 'chay',
    pho: 'ph√¥ mai',
    bacon: 'bacon',
};

function extractCategoriesFromKeywords(keywords) {
    const mainCategory = [],
        category = [];
    keywords.forEach((kw) => {
        const normalized = normalizeText(kw);
        if (MAIN_CATEGORY_MAP[normalized] && !mainCategory.includes(MAIN_CATEGORY_MAP[normalized])) {
            mainCategory.push(MAIN_CATEGORY_MAP[normalized]);
        }
        if (CATEGORY_MAP[normalized] && !category.includes(CATEGORY_MAP[normalized])) {
            category.push(CATEGORY_MAP[normalized]);
        }
    });
    return { mainCategory, category };
}

async function askQuestion(question) {
    try {
        const keywords = extractKeywords(question);
        const allProducts = await Product.find();
        const exactProduct = allProducts.find((p) => normalizeText(p.name) === normalizeText(question));

        if (exactProduct) {
            const suggestProduct = allProducts
                .filter(
                    (p) =>
                        p._id.toString() !== exactProduct._id.toString() &&
                        normalizeText(p.mainCategory) === normalizeText(exactProduct.mainCategory),
                )
                .slice(0, 3);

            const prompt = `Ng∆∞·ªùi d√πng h·ªèi: "${question}"
Th√¥ng tin m√≥n ch√≠nh:
- T√™n: ${exactProduct.name}
- M√¥ t·∫£: ${exactProduct.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
- Gi√°: ${exactProduct.price.toLocaleString('vi-VN')} VNƒê
${suggestProduct.length > 0 ? `G·ª£i √Ω th√™m m√≥n: ${suggestProduct.map((p) => p.name).join(', ')}` : ''}
H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán.`;

            let reply = '';
            try {
                const result = await model.generateContent(prompt);
                reply = result.response.text();
            } catch {
                reply = `ƒê√¢y l√† m√≥n b·∫°n ƒëang t√¨m: ${exactProduct.name} (${exactProduct.price.toLocaleString(
                    'vi-VN',
                )}ƒë).\n${exactProduct.description || 'Kh√¥ng c√≥ m√¥ t·∫£.'}`;
            }

            return {
                reply,
                mainProduct: exactProduct,
                suggestProduct,
                mainCategory: [normalizeText(exactProduct.mainCategory)],
                category: [normalizeText(exactProduct.category)],
            };
        }

        const { mainCategory, category } = extractCategoriesFromKeywords(keywords);
        const normalizedMainCategory = mainCategory.map(normalizeText);
        const normalizedCategory = category.map(normalizeText);

        const matchedProducts = allProducts.filter((p) => {
            const mc = normalizeText(p.mainCategory);
            const c = normalizeText(p.category);
            if (normalizedMainCategory.length && normalizedCategory.length) {
                return normalizedMainCategory.includes(mc) && normalizedCategory.includes(c);
            } else if (!normalizedMainCategory.length && normalizedCategory.length) {
                return normalizedCategory.includes(c);
            } else if (normalizedMainCategory.length && !normalizedCategory.length) {
                return normalizedMainCategory.includes(mc);
            }
            return false;
        });

        if (matchedProducts.length > 0) {
            if (matchedProducts.length === 1) {
                const mainProduct = matchedProducts[0];
                const suggestProduct = allProducts
                    .filter(
                        (p) =>
                            p._id.toString() !== mainProduct._id.toString() &&
                            normalizeText(p.mainCategory) === normalizeText(mainProduct.mainCategory),
                    )
                    .slice(0, 3);

                const prompt = `Ng∆∞·ªùi d√πng h·ªèi: "${question}"
Th√¥ng tin m√≥n ch√≠nh:
- T√™n: ${mainProduct.name}
- M√¥ t·∫£: ${mainProduct.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
- Gi√°: ${mainProduct.price.toLocaleString('vi-VN')} VNƒê
${suggestProduct.length > 0 ? `G·ª£i √Ω th√™m m√≥n: ${suggestProduct.map((p) => p.name).join(', ')}` : ''}
H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán.`;

                let reply = '';
                try {
                    const result = await model.generateContent(prompt);
                    reply = result.response.text();
                } catch {
                    reply = `ƒê√¢y l√† m√≥n b·∫°n ƒëang t√¨m: ${mainProduct.name} (${mainProduct.price.toLocaleString(
                        'vi-VN',
                    )}ƒë).\n${mainProduct.description || 'Kh√¥ng c√≥ m√¥ t·∫£.'}`;
                }

                return {
                    reply,
                    mainProduct,
                    suggestProduct,
                    mainCategory: normalizedMainCategory,
                    category: normalizedCategory,
                };
            }

            const productList = matchedProducts
                .map(
                    (p, i) =>
                        `üçî M√≥n ${i + 1}:
- T√™n: ${p.name}
- Gi√°: ${p.price.toLocaleString('vi-VN')}ƒë
- M√¥ t·∫£: ${p.description || 'Kh√¥ng c√≥ m√¥ t·∫£.'}
- H√¨nh ·∫£nh: ${p.image || 'Kh√¥ng c√≥ h√¨nh ·∫£nh.'}`,
                )
                .join('\n\n');

            const reply = `M√¨nh t√¨m th·∫•y ${matchedProducts.length} m√≥n ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n:\n\n${productList}`;

            return {
                reply,
                mainProduct: null,
                suggestProduct: matchedProducts,
                mainCategory: normalizedMainCategory,
                category: normalizedCategory,
            };
        }

        const productNames = allProducts.map((p) => normalizeText(p.name));
        const matchResult = stringSimilarity.findBestMatch(normalizeText(question), productNames);
        const bestMatchIndex = matchResult.bestMatchIndex;
        const bestMatchRating = matchResult.bestMatch.rating;

        if (bestMatchRating < 0.4) {
            return {
                reply: 'Xin l·ªói, t√¥i ch∆∞a t√¨m th·∫•y m√≥n n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n.',
                mainProduct: null,
                suggestProduct: [],
                mainCategory: [],
                category: [],
            };
        }

        const mainProduct = allProducts[bestMatchIndex];
        const suggestProduct = allProducts
            .filter(
                (p) =>
                    p._id.toString() !== mainProduct._id.toString() &&
                    normalizeText(p.mainCategory) === normalizeText(mainProduct.mainCategory),
            )
            .slice(0, 3);

        const prompt = `Ng∆∞·ªùi d√πng h·ªèi: "${question}"
Th√¥ng tin m√≥n ch√≠nh:
- T√™n: ${mainProduct.name}
- M√¥ t·∫£: ${mainProduct.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}
- Gi√°: ${mainProduct.price.toLocaleString('vi-VN')} VNƒê
${suggestProduct.length > 0 ? `G·ª£i √Ω th√™m m√≥n: ${suggestProduct.map((p) => p.name).join(', ')}` : ''}
H√£y tr·∫£ l·ªùi ng∆∞·ªùi d√πng b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán.`;

        let reply = '';
        try {
            const result = await model.generateContent(prompt);
            reply = result.response.text();
        } catch {
            reply = `ƒê√¢y l√† m√≥n b·∫°n ƒëang t√¨m: ${mainProduct.name} (${mainProduct.price.toLocaleString('vi-VN')}ƒë).\n${
                mainProduct.description || 'Kh√¥ng c√≥ m√¥ t·∫£.'
            }`;
        }

        return {
            reply,
            mainProduct,
            suggestProduct,
            mainCategory: [normalizeText(mainProduct.mainCategory)],
            category: [normalizeText(mainProduct.category)],
        };
    } catch (error) {
        console.error('‚ùå L·ªói x·ª≠ l√Ω chatbot:', error);
        return {
            reply: 'ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau.',
            mainProduct: null,
            suggestProduct: [],
            mainCategory: [],
            category: [],
        };
    }
}

module.exports = { askQuestion };
